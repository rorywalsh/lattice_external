# Only trigger CI builds for the master branch, instead 
# of every branch. You'll automatically be configured to 
# build PRs, but you can't currently control that from the YAML directly
# For details, see https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers
trigger:
- master

# We can run multiple jobs in parallel. For this project
# I'm running Linux, Windows, and macOS jobs. For syntac details
# see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases
jobs:

# Run a build on Windows at the same time
# - job: Windows
#   pool:
#     vmImage: 'windows-latest'
#   # The Windows build involves running a powershell script
#   # to execute the Cake build script
#   steps:
#   - powershell: gci env:* | sort-object name | Format-Table -AutoSize 

#   - powershell: |
#               cd C:/
#               (New-Object System.Net.WebClient).DownloadFile("https://download.steinberg.net/sdk_downloads/vstsdk3611_22_10_2018_build_34.zip", "C:\vstsdk3611_22_10_2018_build_34.zip")
#               (New-Object System.Net.WebClient).DownloadFile("https://download.steinberg.net/sdk_downloads/asiosdk_2.3.3_2019-06-14.zip", "C:\ASIOSDK2.3.2.zip")
#               7z.exe x vstsdk3611_22_10_2018_build_34.zip
#               mkdir SDKs  
#               ls
#               dir SDKs
#               7z.exe x asiosdk2.3.2.zip -oC:/SDKs/ASIOSDK2.3.3
#               Get-ChildItem -Path "C:/VST_SDK" | Copy-Item -Destination "C:/SDKs/VST_SDK" -Recurse -Container
#               ls SDKs

#   - powershell: git submodule update --init --recursive --progress | cmake -Bbuild | cmake --build build
#   - powershell: |
#               cd D:/a/1/s/installers/Windows
#               set PATH=%PATH%;"C:\\Program Files (x86)\\Inno Setup 5"
#               iscc installer.iss
#               Copy-Item "D:/a/1/s/installers/Windows/Output/LatticeInstaller.exe" -Destination D:/a/1/a/LatticeInstaller.exe
#     env:
#       COREHOST_TRACE: 0
#       DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
#       DOTNET_CLI_TELEMETRY_OPTOUT: 1


#   - task: PublishBuildArtifacts@1
#     inputs:
#       pathtoPublish: '$(Build.ArtifactStagingDirectory)'

- job: macOS
  timeoutInMinutes: 100
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
          git submodule update --init --recursive --progress
          mkdir build
          cd build
          brew install ninja
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release
          cmake --build .
          cp -rf $SYSTEM_DEFAULTWORKINGDIRECTORY/bin $BUILD_ARTIFACTSTAGINGDIRECTORY
    displayName: "Building..."
    env:
      COREHOST_TRACE: 0
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'Binaries' 
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#       # artifactName: '${SYSTEM_DEFAULTWORKINGDIRECTORY}/Cabbage.pkg'

